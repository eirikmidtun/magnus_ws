#!/usr/bin/env python3
from MCSimPython.utils import Rx
import rospy
import numpy as np
from MCSimPython.simulator.thruster_dynamics import ThrusterDynamics
from std_msgs.msg import Float64MultiArray
vessel_name = "CSEI"


class ThrustAlloc(object):
    def __init__(self) -> None:
        self.counter = 0.0
        self.u = np.zeros(3)
        self.alpha = np.zeros(2)
        self.tau, self.tau_cmd = np.zeros(6), np.zeros(6)

        #  4 Thrusters
        self.Lx = np.array([-0.4574, -0.4574, 0.3875])
        # y position of thruster in body frame
        self.Ly = np.array([0.055, -0.055, 0.0])

        self.K = np.diag([1.03, 1.03, 2.629])

        # Exended thrust koefficient
        self.K_ext = np.diag([self.K[0][0], self.K[0][0], self.K[1][1], self.K[1][1], self.K[2][2]])
        print(self.K_ext)

        # Exended configuration matrix
        self.T_ext = np.array([[1.0, 0.0, 1.0, 0.0, 0.0],
                               [0.0, 1.0, 0.0, 1.0, 1.0],
                               [-self.Ly[0], self.Lx[0], -self.Ly[1], self.Lx[1], self.Lx[2]]])

        # Invers the configuration and koefficient matrices
        self.K_extInv = np.linalg.inv(self.K_ext)
        self.T_extInv = np.linalg.pinv(self.T_ext)

        # Publishers/Subscribers
        self.tau_cmd_sub = rospy.Subscriber(
            f"/{vessel_name}/tau_cmd", Float64MultiArray, self.tau_cmdCallback, queue_size=1)
        self.u_pub = rospy.Publisher(
            f"/CSEI/u_cmd", Float64MultiArray, queue_size=1)

        self.tau_pub = rospy.Publisher(
            f"/CSEI/tau", Float64MultiArray, queue_size=1)
        # Messages
        self.u_msg = Float64MultiArray()
        self.tau_msg = Float64MultiArray()

    def ssa(self, angle):
        """
            Shortest signed angle between two angles.
        """
        angle = ((angle + np.math.pi) % (2*np.math.pi)) - np.math.pi

        return angle

    def tau_cmdCallback(self, msg):
        """
            Allocate the forces to be  produced by each thruster, and publish the command forces to the u topic.
        """
        self.tau_cmd = msg.data


        # Calculating decomposed power for each thruster
        self.u_ext = np.matmul(np.matmul(self.K_extInv, self.T_extInv), self.tau_cmd)

        # Calculate individual thruster force
        for i in range(len(self.u)-1):
            self.u[i] = np.math.sqrt(self.u_ext[i*2]**2 + self.u_ext[i*2+1]**2)
            self.u[i] += 0.0     # Thruster bias
        self.u[-1]= self.u_ext[-1]

        # Calculate individual thruster angle
        for i in range(len(self.alpha)):
            self.alpha[i] = self.ssa(np.math.atan2(
                self.u_ext[2*i+1], self.u_ext[2*i]))

    def calculate_tau_ctrl(self):
        # Saturate control signal
        self.u = np.clip(self.u, -.5, .5)

        # Calculate actual (estimated) tau from thrusters
        actuator_loads = np.diag(self.K) @ self.u
        self.tau = self.thruster_configuration(self.alpha) @ actuator_loads

        # Store in topic, rotate*
        self.tau = np.asarray(self.tau)
        self.tau = Rx(np.pi)@self.tau

        self.tau_msg.data = self.tau

    def thruster_configuration(self, alpha):
        """
        Sets up the thrust configuration matrix.

        Parameters
        -----------
        alpha : array_like
            Azimuth angles.

        Returns
        --------
         : array_like
            Thrust configuration matrix.
        """

        return np.array([
            np.cos(alpha),
            np.sin(alpha),
            self.Lx * np.sin(alpha) - self.Ly * np.cos(alpha)
        ])

    def publish(self):
        """
            Publish command forces to tau topic.
        """

        # If 4 Thrusters
        self.u_msg.data = np.array([self.u[2], self.u[0], self.u[1], self.alpha[0], self.alpha[1]])

        # publish messsage
        self.u_pub.publish(self.u_msg)

        self.tau_pub.publish(self.tau_msg)


if __name__ == '__main__':
    rospy.init_node("thrust_alloc")
    rospy.loginfo("INITIALIZING THRUSTER ALLOCATION NODE")
    r = rospy.Rate(100)

    thrustAlloc = ThrustAlloc()
    

    while not rospy.is_shutdown():
        thrustAlloc.publish()

        r.sleep()

    rospy.spin()










