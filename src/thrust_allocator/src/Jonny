#!/usr/bin/env python3
from MCSimPython.utils import Rx
import rospy
import numpy as np
from MCSimPython.simulator.thruster_dynamics import ThrusterDynamics
from std_msgs.msg import Float64MultiArray
vessel_name = "CSEI"


class F2PWM():
    def __init__(self):
        self.thrustermap0_positive = np.array([[ 0.        ,  0.1,         0.11,        0.12,        0.13,        0.14,     0.15,        0.16,        0.17,        0.18,        0.19,        0.2 ,    0.21,        0.22      ],
        [-2.61799388,  0.,          0.2 ,        0.37,        0.56,        0.82,     0.93,        1.1 ,        1.27,        1.47,        1.87,        2.4 ,    2.77,        3.3       ],
        [-2.0943951 ,  0.,          0.12,        0.29,        0.43,        0.64,     0.73,        0.91,        1.02,        1.17,        1.47,        1.94,    2.13,        2.56      ],
        [-1.57079633,  0.,          0.16,        0.34,        0.51,        0.74,     0.82,        1.02,        1.12,        1.29,        1.6 ,        2.03,    2.23,        2.47      ],
        [-1.04719755,  0.,          0.14,        0.31,        0.49,        0.68,     0.73,        0.89,        1.03,        1.16,        1.53,        2.05,    2.39,        2.83      ],
        [-0.52359878,  0.,          0.17,        0.43,        0.64,        0.87,     0.92,        1.15,        1.26,        1.46,        1.84,        2.41,    2.76,        3.19      ],
        [ 0.        ,  0.,          0.21,        0.47,        0.66,        0.92,     1.13,        1.23,        1.38,        1.54,        1.96,        2.51,    2.79,        3.21      ],
        [ 0.52359878,  0.,          0.23,        0.42,        0.62,        0.87,     0.94,        1.17,        1.32,        1.5 ,        1.9 ,        2.43,    2.75,        3.21      ],
        [ 1.04719755,  0.,          0.15,        0.33,        0.46,        0.65,     0.75,        0.92,        1.02,        1.15,        1.49,        1.93,    2.17,        2.47      ],
        [ 1.57079633,  0.,          0.12,        0.25,        0.35,        0.49,     0.6 ,        0.67,        0.76,        0.85,        1.1 ,        1.47,    1.66,        1.9       ],
        [ 2.0943951 ,  0.,          0.12,        0.26,        0.42,        0.58,     0.68,        0.79,        0.86,        0.96,        1.23,        1.59,    1.74,        2.08      ],
        [ 2.61799388,  0.,          0.14,        0.31,        0.46,        0.65,     0.8 ,        0.92,        1.02,        1.14,        1.48,        1.94,    2.2 ,        2.56      ],
        [ 3.14159265,  0.,          0.16,        0.4 ,        0.56,        0.78,     1.01,        1.12,        1.29,        1.41,        1.87,        2.36,    2.63,        3.04      ]])

        self.thrustermap0_negative = np.array([[ 0.        , -0.1,        -0.11,       -0.12,       -0.13,       -0.14,     -0.15,       -0.16      ],
        [-2.61799388,  0.,          0.,          0.33,        0.6 ,        0.83,     1.17 ,       1.69      ],
        [-2.0943951 ,  0.,          0.,          0.2 ,        0.43,        0.57,     0.85 ,       1.24      ],
        [-1.57079633,  0.,          0.,          0.15,        0.33,        0.47,     0.59 ,       1.        ],
        [-1.04719755,  0.,          0.,          0.16,        0.37,        0.52,     0.74 ,       1.02      ],
        [-0.52359878,  0.,          0.,          0.21,        0.46,        0.62,     0.9  ,       1.28      ],
        [ 0.        ,  0.,          0.,          0.31,        0.6 ,        0.84,     1.22 ,       1.65      ],
        [ 0.52359878,  0.,          0.,          0.28,        0.62,        0.8 ,     1.03 ,       1.7       ],
        [ 1.04719755,  0.,          0.,          0.25,        0.53,        0.77,     1.03 ,       1.43      ],
        [ 1.57079633,  0.,          0.,          0.21,        0.44,        0.62,     0.87 ,       1.22      ],
        [ 2.0943951 ,  0.,          0.,          0.24,        0.51,        0.69,     0.98 ,       1.34      ],
        [ 2.61799388,  0.,          0.,          0.28,        0.59,        0.81,     1.11 ,       1.55      ],
        [ 3.14159265,  0.,          0.,          0.31,        0.67,        0.81,     1.26 ,       1.75      ]])
        self.thrustermap1_positive = np.array([[ 0.        ,  0.1,         0.11,        0.12,        0.13,        0.14,     0.15,        0.16,        0.17,        0.18,        0.19,        0.2 ,    0.21,        0.22      ],
        [-2.61799388,  0.,          0.14,        0.31,        0.46,        0.65,     0.8 ,        0.92,        1.02,        1.14,        1.48,        1.94,    2.2 ,        2.56      ],
        [-2.0943951 ,  0.,          0.12,        0.26,        0.42,        0.58,     0.68,        0.79,        0.86,        0.96,        1.23,        1.59,    1.74,        2.08      ],
        [-1.57079633,  0.,          0.12,        0.25,        0.35,        0.49,     0.6 ,        0.67,        0.76,        0.85,        1.1 ,        1.47,    1.66,        1.9       ],
        [-1.04719755,  0.,          0.15,        0.33,        0.46,        0.65,     0.75,        0.92,        1.02,        1.15,        1.49,        1.93,    2.17,        2.47      ],
        [-0.52359878,  0.,          0.23,        0.42,        0.62,        0.87,     0.94,        1.17,        1.32,        1.5 ,        1.9 ,        2.43,    2.75,        3.21      ],
        [ 0.        ,  0.,          0.21,        0.47,        0.66,        0.92,     1.13,        1.23,        1.38,        1.54,        1.96,        2.51,    2.79,        3.21      ],
        [ 0.52359878,  0.,          0.17,        0.43,        0.64,        0.87,     0.92,        1.15,        1.26,        1.46,        1.84,        2.41,    2.76,        3.19      ],
        [ 1.04719755,  0.,          0.14,        0.31,        0.49,        0.68,     0.73,        0.89,        1.03,        1.16,        1.53,        2.05,    2.39,        2.83      ],
        [ 1.57079633,  0.,          0.16,        0.34,        0.51,        0.74,     0.82,        1.02,        1.12,        1.29,        1.6 ,        2.03,    2.23,        2.47      ],
        [ 2.0943951 ,  0.,          0.12,        0.29,        0.43,        0.64,     0.73,        0.91,        1.02,        1.17,        1.47,        1.94,    2.13,        2.56      ],
        [ 2.61799388,  0.,          0.2 ,        0.37,        0.56,        0.82,     0.93,        1.1 ,        1.27,        1.47,        1.87,        2.4 ,    2.77,        3.3       ],
        [ 3.14159265,  0.,          0.16,        0.4 ,        0.56,        0.78,     1.01,        1.12,        1.29,        1.41,        1.87,        2.36,    2.63,        3.04      ]])

        self.thrustermap1_negative = np.array([[ 0.        , -0.1,   -0.12,       -0.13,       -0.14,     -0.15,       -0.16      ],
        [ -2.61799388,  0.,    0.28,        0.59,        0.81,     1.11 ,       1.55      ],
        [ -2.0943951 ,  0.,    0.24,        0.51,        0.69,     0.98 ,       1.34      ],
        [ -1.57079633,  0.,    0.21,        0.44,        0.62,     0.87 ,       1.22      ],
        [ -1.04719755,  0.,    0.25,        0.53,        0.77,     1.03 ,       1.43      ],
        [ -0.52359878,  0.,    0.28,        0.62,        0.8 ,     1.03 ,       1.7       ],
        [ 0.        ,  0.,     0.31,        0.6 ,        0.84,     1.22 ,       1.65      ],
        [0.52359878,  0.,      0.21,        0.46,        0.62,     0.9  ,       1.28      ],
        [1.04719755,  0.,      0.16,        0.37,        0.52,     0.74 ,       1.02      ],
        [1.57079633,  0.,      0.15,        0.33,        0.47,     0.59 ,       1.        ],
        [2.0943951 ,  0.,      0.2 ,        0.43,        0.57,     0.85 ,       1.24      ],
        [2.61799388,  0.,      0.33,        0.6 ,        0.83,     1.17 ,       1.69      ],
        [3.14159265,  0.,      0.31,        0.67,        0.81,     1.26 ,       1.75         ]])
        self.bowthrustermap_positive = np.array(
            [[.1,.12,   .14, .16, .18, .2, .22, .24, .26, .28, .3, .32, .34, .36, .38, .4],
             [0,0.04,   0.05, 0.06, 0.09, 0.14, 0.18, 0.22, 0.28, 0.33, 0.39, 0.5, 0.6, 0.63, 0.77, 0.88]])
        self.bowthrustermap_negative = np.array(
            [[-.1,-.12, -.14, -.16, -.18, -.2, -.22, -.24, -.26, -.28, -.3, -.32, -.34, -.36, -.38, -.4],
             [0,0.05, 0.06, 0.07, 0.1, 0.14, 0.21, 0.24, 0.3, 0.37, 0.43, 0.51, 0.61, 0.69, 0.76, 0.9]])


    def get_pwm(self,tau,alpha):
        pwm = np.zeros(3)
        pwm[0]=self.interpol_1d_bow(tau[0])
        for i in range(1,3):
            pwm[i] = self.interpol_2d(tau[i],alpha[i-1],i-1)
        return(np.round(pwm,2))


    def interpol_2d(self,tau,alpha,thruster):
        if thruster == 0:
            if tau>=0:
                data = self.thrustermap0_positive
            else:
                data = self.thrustermap0_negative
        if thruster == 1:
            if tau>=0:
                data = self.thrustermap1_positive
            else:
                data = self.thrustermap1_negative
        tau = np.abs(tau)
        counter = 1
        if alpha < -5*np.pi/6:
            Q_low = round(np.interp(tau, data[1][1:], data[0][1:]), 3)
            Q_high = round(np.interp(tau, data[-1][1:], data[0][1:]), 3)
            alpha_low =-5*np.pi/6
            alpha_high = -np.pi
        else:
            for i in range(1, len(data)):
                if round(data[i][0],2) == round(alpha,2):
                    return round(np.interp(tau, data[i][1:], data[0][1:]), 3)
                if alpha < data[i][0]:
                    break
                else:
                    counter +=1
            Q_low = round(np.interp(tau, data[counter-1][1:], data[0][1:]), 3)
            Q_high = round(np.interp(tau, data[counter][1:], data[0][1:]), 3)
            alpha_low = data[counter-1][0]
            alpha_high = data[counter][0]

        return round((alpha_high-alpha)/(alpha_high-alpha_low)*Q_low+(alpha-alpha_low)/(alpha_high-alpha_low)*Q_high,2)

    def interpol_1d_bow(self,tau):
        if 0<tau:
            data = self.bowthrustermap_positive
            return round(np.interp(tau, data[1], data[0]), 2)
        else:
            data = self.bowthrustermap_negative
            data = np.abs(data)
            tau = np.abs(tau)
            return -round(np.interp(tau,data[1],data[0]),2)


class ThrustAlloc(object):
    def __init__(self) -> None:
        self.counter = 0.0
        self.u = np.zeros(3)
        self.alpha = np.zeros(2)
        self.tau, self.tau_cmd = np.zeros(6), np.zeros(6)

        self.Lx = np.array([-0.425,-0.425,0.37])
        self.Ly = np.array([0.07,-0.07,0])
        self.K = np.diag([1,1,1])

        # Exended thrust koefficient
        self.K_ext = np.diag([self.K[0][0], self.K[0][0], self.K[1][1], self.K[1][1], self.K[2][2]])
        print(self.K_ext)

        # Exended configuration matrix
        self.T_ext = np.array([[1.0, 0.0, 1.0, 0.0, 0.0],
                               [0.0, 1.0, 0.0, 1.0, 1.0],
                               [-self.Ly[0], self.Lx[0], -self.Ly[1], self.Lx[1], self.Lx[2]]])

        # Invers the configuration and koefficient matrices
        self.K_extInv = np.linalg.inv(self.K_ext)
        self.T_extInv = np.linalg.pinv(self.T_ext)

        # Publishers/Subscribers
        self.u_pub = rospy.Publisher(
            f"/CSV/u", Float64MultiArray, queue_size=1)

        self.tau_pub = rospy.Publisher(
            f"/CSEI/tau", Float64MultiArray, queue_size=1)
        # Messages
        self.u_msg = Float64MultiArray()
        self.tau_msg = Float64MultiArray()

    def ssa(self, angle):
        """
            Shortest signed angle between two angles.
        """
        angle = ((angle + np.math.pi) % (2*np.math.pi)) - np.math.pi

        return angle

    def callback(self, msg):
        """
            Allocate the forces to be  produced by each thruster, and publish the command forces to the u topic.
        """
        self.tau_cmd = msg.data

        # Rotate*
        ##self.tau_cmd = Rx(np.pi)@self.tau_cmd
        self.tau_cmd = self.tau_cmd


        # Calculating decomposed power for each thruster
        self.u_ext = np.matmul(np.matmul(self.K_extInv, self.T_extInv), self.tau_cmd)
       

        # Calculate individual thruster force
        for i in range(len(self.u)-1):
            self.u[i] = np.math.sqrt(self.u_ext[i*2]**2 + self.u_ext[i*2+1]**2)
            self.u[i] += 0.0     # Thruster bias
        self.u[-1]= self.u_ext[-1]

        # Calculate individual thruster angle
        for i in range(len(self.alpha)):
            self.alpha[i] = self.ssa(np.math.atan2(
                self.u_ext[2*i+1], self.u_ext[2*i]))
        F_cmd = np.zeros(3)
        pwm = F2PWM()
        F_cmd = pwm.get_pwm(np.array(self.u[2],self.u[0],self.u[1]),np.array(self.alpha[0],self.alpha[1]))
        self.u[0] = F_cmd[1]
        self.u[1] = F_cmd[2]
        self.u[2] = F_cmd[0]

    def calculate_tau_ctrl(self):
        # Saturate control signal
        self.u = np.clip(self.u, -.5, .5)

        # Calculate actual (estimated) tau from thrusters
        actuator_loads = np.diag(self.K) @ self.u
        self.tau = self.thruster_configuration(self.alpha) @ actuator_loads

        # Store in topic, rotate*
        self.tau = np.asarray(self.tau)
        self.tau = Rx(np.pi)@self.tau

        self.tau_msg.data = self.tau

    def thruster_configuration(self, alpha):
        """
        Sets up the thrust configuration matrix.

        Parameters
        -----------
        alpha : array_like
            Azimuth angles.

        Returns
        --------
         : array_like
            Thrust configuration matrix.
        """

        return np.array([
            np.cos(alpha),
            np.sin(alpha),
            self.Lx * np.sin(alpha) - self.Ly * np.cos(alpha)
        ])

    def publish(self):
        """
            Publish command forces to tau topic.
        """

        # If 4 Thrusters
        self.u_msg.data = np.array([self.u[2], self.u[0], self.u[1], self.alpha[0], self.alpha[1]])


        period = 20
        servo_sin = np.sin(2*np.pi/period*rospy.get_time())
        self.u = [0.12, 0.12, 0.12]
        self.u_msg.data = np.array([self.u[2], self.u[0], self.u[1], servo_sin, servo_sin])

        # publish messsage
        self.u_pub.publish(self.u_msg)

        self.tau_pub.publish(self.tau_msg) 


if __name__ == '__main__':
    rospy.init_node("thrust_alloc")
    rospy.loginfo("INITIALIZING THRUSTER ALLOCATION NODE")
    r = rospy.Rate(100)

    thrustAlloc = ThrustAlloc()
    
    rospy.Subscriber(f"/{vessel_name}/tau_cmd", Float64MultiArray, thrustAlloc.callback)

    while not rospy.is_shutdown():
        thrustAlloc.publish()

        r.sleep()

    rospy.spin()
