#!/usr/bin/env python3
import rospy
import numpy as np
import math
import control as ct
from scipy import linalg

from MCSimPython.control.basic import PID

from std_msgs.msg import Float64MultiArray, Bool
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Joy


vessel_name = "CSEI"



def Rzyx2D(psi):
    R = np.array([[math.cos(psi), -math.sin(psi)],
                  [math.sin(psi), math.cos(psi)]])
    return R
80

def Rzyx(psi):
    """
    Rzyx(psi) computes the rotation matrix, R in SO(3), using the
    zyx convention and Euler angle representation.
    """

    R = np.array([[math.cos(psi), -math.sin(psi), 0],
                  [math.sin(psi), math.cos(psi), 0],
                  [0, 0, 1]])
    return R


def shortest_rotation(from_angle, to_angle):
    return ((to_angle - from_angle + np.pi) % (2 * np.pi)) - np.pi



def rate_limiter(x, x_prev, rate_limit):  # Avoid chattering when setting w_safe
    delta_x = x - x_prev
    for i in range(len(delta_x)):
        delta_x[i] = np.clip(delta_x[i], -rate_limit, rate_limit)
        # new_array = x_prev + np.sign(delta_x) * rate_limit
    return x_prev + delta_x
    # return new_array


class Controller (object):
    def __init__(self, dt=0.01) -> None:
        self.kp = np.array([25.0, 25.0, 8.])*0.05  # Proportional gain
        self.kd = np.array([14, 15, 2.])*2.4  # Derivative gain
        self.ki = np.array([10, 5, .4])*0.007   # Integral gain

        self.pid = PID(kp=self.kp, kd=self.kd,
                       ki=self.ki, dt=dt)  # gains from MCSimPython package

        self.tau = np.zeros((3,1))  # Command forces [surge, sway, yaw]
        self.eta = np.zeros((3,1))  # Pose, attitude [surge, sway, yaw]
        self.nu = np.zeros((3,1))   # Velocity [surge, sway, yaw]

        self.eta_d = np.zeros((3,1))  # Desired pose, attitude [surge, sway, yaw]
        self.eta_d_dt = np.zeros((3,1))

        # CSE parameters
        X_u = -0.6555
        Y_v = -1.33
        N_r = -1.900
        self.D0 = -np.array([[X_u, 0, 0], [0, Y_v, 0],
                             [0, 0, N_r]])
        self.M0 = np.array([[16.11, 0.0, 0.0], 
                           [0.0, 24.11, 0.5291], 
                           [0.0, 0.5291, 2.7600]]) 


        ### General variables ###
        self.nu_ref = np.zeros((3, 1))
        self.nu_cmd = np.zeros((3, 1))
        self.nu_cmd_old = np.zeros((3, 1))
        self.nu_cmd_dot = np.zeros((3, 1))
        self.nu_cmd_dot_old = np.zeros((3, 1))
        self.nu_nom = np.zeros((3, 1))

        self.dt = 0.01
        self.Ts = 0.01


        ### MRAC ###
        # State matrix etc.
        self.A = -np.linalg.inv(self.M0) @ self.D0  # 3x3
        self.B = np.linalg.inv(self.M0)  # 3x3

        # K LQR:
        self.Qk = np.diag([1, 1, 1])
        self.Rk = np.diag([1, 1, 1])
        PK = linalg.solve_continuous_are(
            self.A, self.B, self.Qk, self.Rk)
        self.K_LQR = np.linalg.inv(self.Rk) @ self.B.T @ PK  # 3x3
        #self.K_LQR = np.array([[7.285, 0, 0], [0, 4.311, 0.036], [0, -0.027, 0.21]])


        # Reference model
        self.A_ref = self.A - self.B @ self.K_LQR  # 3x3
        self.Q = np.diag([1, 1, 1])
        self.P_ref = ct.lyap(self.A_ref, self.Q)  # 3x3

        # Parameters80
        self.K_hat = np.zeros((3, 3))

        # self.K_hat = np.array([[0.004, 0, 0], [0, Y_v, 0],
        #                           [0, 0, N_r]])
        self.Lambda = np.identity(3)
        self.b = np.zeros((3, 1))
        #self.b = np.array([[]])

        # Observer-like reference model parameters
        self.sigma = 1  # 1 to enable state feedback in reference filter, 0 to disable
        self.ep = 10
        self.Q_ep = self.Q + (self.ep + 1) / self.ep * np.identity(3)
        self.R_ep = self.ep / (self.ep + 1) * np.identity(3)
        self.P_ep = linalg.solve_continuous_are(
            self.A_ref, self.sigma * np.identity(3), self.Q_ep, self.R_ep)

        self.L_ep = self.sigma * self.P_ep @ np.linalg.inv(self.R_ep)

        # Update law parameters
        # self.Gamma_K = 25*10**(-3)*np.diag([1, 1, 1])
        self.Gamma_K = 25 * np.diag([1, 1, 1])
        #self.Gamma_K = 30*15*25 * np.diag([1, 1, 1])
        #self.Gamma_K = 10**-(5)*30*15*25 * np.diag([1, 1, 1])

        # self.Gamma_b = 50*10**(-3)*np.diag([1, 1, 1])
        self.Gamma_b = 50 * np.diag([1, 1, 1])
        #self.Gamma_b = 30*15*50 * np.diag([1, 1, 1])
        self.Gamma_L = 1 * np.diag([1, 1, 1])
        self.K_hat = np.zeros((3, 3))
        #self.K_hat = np.array([[-4.2, 0.05, 1.1], [-0.57, -0.015, 0.15],
        #                       [-0.01, 0.064, 0.13]])
        #self.K_hat = np.array([[-5.4, 0.3, 2.1], [-0.73, 0.01, 0.29],
        #                       [-0.05, 0.0715, 0.155]])
        self.b_hat = np.zeros((3, 1))

        ### BASELINE ###
        # State matrix etc.
        self.A1 = np.block([[np.zeros((3, 3)), np.eye(3)], [
            np.zeros((3, 3)), -np.linalg.inv(self.M0) @ self.D0]])  # 6x6
        self.B1 = np.block(
            [[np.zeros((3, 3))], [np.linalg.inv(self.M0)]])  # 6x3

        # Baseline LQR
        self.Qk1 = np.diag([1, 1, 1, 1, 1, 1])
        self.Rk1 = np.diag([1, 1, 1])
        PK1 = linalg.solve_continuous_are(
            self.A1, self.B1, self.Qk1, self.Rk1)
        self.K_LQR1 = np.linalg.inv(self.Rk1) @ self.B1.T @ PK1  # 6x3
        self.Ki = self.K_LQR1[:, [0, 1, 2]]  # 3x3
        self.Kp = self.K_LQR1[:, [3, 4, 5]]  # 3x3

        ###########################################################################################################
        self.Kp = np.diag([40,20,1])*1.7
        self.Ki = np.diag([2,2,1])*0.1
        ###########################################################################################################
        self.xi = np.zeros((3,1))


        self.active = 0


        ### CBF ###
        self.w = np.array([[0.0, 0.0]]).T
        self.w_cmd = np.array([[0.0, 0.0]]).T
        self.w_old = np.array([[0.0, 0.0]]).T
        self.alpha = 0.0
        self.active = 0
        self.Kappa = np.zeros((2, 1))
        self.B = None
        self.B_dot = None
        self.B_dot_dw = None
        self.obstacles = None
        self.alpha = None
        self.x_prev = np.zeros(2)
        self.q = np.zeros((2, 1))
        self.c = 0.0
        self.constraint_active = False
        self.w_psi_d = 0.0
        self.old_w_psi_d = 0.0
        self.cbfstate = "CBF OFF"


        # Publishers/Subscribers
        self.odom_sub = rospy.Subscriber(
            f"/{vessel_name}/observer_states", Float64MultiArray, self.observerCallback, queue_size=1)  # Odometry subscriber
        self.joy_sub = rospy.Subscriber(f"/joy", Joy, self.joyCallback, queue_size=1) #Sub to joystick
        self.odom_sim = rospy.Subscriber(f"/CSEI/odom_sim", Odometry, self.odomCallback, queue_size=1)  # Odometry subscriber when simulating
        # Desired state subscriber
        self.desiredState_sub = rospy.Subscriber(
            f"/{vessel_name}/reference", Float64MultiArray, self.referenceCallback, queue_size=1)
        self.gains_sub = rospy.Subscriber(
            f"/{vessel_name}/pid_gains", Float64MultiArray, self.gainsCallback, queue_size=1)
        self.nu_cmd_sub = rospy.Subscriber(f"/{vessel_name}/nu_cmd", Float64MultiArray, self.nucmdCallback, queue_size=1)
        self.tau_cmd_pub = rospy.Publisher(
            f"/{vessel_name}/tau_cmd", Float64MultiArray, queue_size=1) 
        self.Khat_pub = rospy.Publisher(
            f"/{vessel_name}/K_hat", Float64MultiArray, queue_size=1) 
        self.bhat_pub = rospy.Publisher(f"/{vessel_name}/b_hat", Float64MultiArray, queue_size=1)
        self.cbf_active_pub = rospy.Publisher(f"/{vessel_name}/cbf_active", Bool, queue_size=1)

        # Messages
        self.tau_cmd_msg = Float64MultiArray()  # command forces [surge, sway, yaw]
        self.Khat_msg = Float64MultiArray() 
        self.bhat_msg = Float64MultiArray() 

    def gainsCallback(self, msg):
        self.pid.set_kp([msg.data[0], msg.data[1], msg.data[2]])
        self.pid.set_ki([msg.data[3], msg.data[4], msg.data[5]])
        self.pid.set_kd([msg.data[6], msg.data[7], msg.data[8]])

    def observerCallback(self, msg):
        """
            Callback function for odometry message. Updating position and attitude of vessel.
        """
        self.eta = np.array([[msg.data[0]], [msg.data[1]], [msg.data[2]]])
        self.nu = np.array([[msg.data[3]], [msg.data[4]], [msg.data[5]]])

    def odomCallback(self, msg):
        """
            Callback function for odometry message when simulating. Updating position and attitude of vessel.
        """
        print("msg.pose.pose.position.x", msg.pose.pose.position.x)
        self.eta[0][0] = msg.pose.pose.position.x
        self.eta[1][0] = msg.pose.pose.position.y
        w = msg.pose.pose.orientation.w
        x = msg.pose.pose.orientation.x
        y = msg.pose.pose.orientation.y
        z = msg.pose.pose.orientation.z
        self.eta[2][0] = np.arctan2(
            2*(w*z+x*y), 1-2*(y**2+z**2))  # quaternion to euler

        self.nu[0] = msg.twist.twist.linear.x
        self.nu[1] = msg.twist.twist.linear.y
        self.nu[2] = msg.twist.twist.angular.z
        
    def referenceCallback(self, msg):
        """
            Callback function for desired state message. Updating desired position/attitude and linear/angular velocity of vessel.
        """
        self.eta_d = np.array([msg.data[0:3]]).T
        self.eta_d_dt = np.array([msg.data[3:6]]).T

    def nucmdCallback(self, msg):
        """
            Callback function for nu_cmd message. Updating desired surge/sway velocity and yaw rate of vessel.
        """
        self.nu_cmd = np.array([msg.data]).T
        print("self.nu_cmd:", self.nu_cmd)


    def joyCallback(self, msg):
        if msg.buttons[1] == 1: #X to activate CBF
            self.cbfstate = "CBF ON"
            rospy.logwarn(self.cbfstate)
        elif msg.buttons[0] == 1: #Square to deactivate CBF
            self.cbfstate = "CBF OFF"
            rospy.logwarn(self.cbfstate)

    def update(self, tracking_method):
        """
            Calculate desired forces. [surge, sway, yaw]
        """
        # Calculate desired forces
        #self.tau = self.pid.get_tau(self.eta, self.eta_d, self.nu, self.nu_d)   
        if tracking_method == 0:
            self.tau = self.baseline_velocity_tracking()
        elif tracking_method == 1:
            self.tau = self.MRAC_velocity_tracking_NR()


    def publishTau(self):
        """
            Publish desired forces. [surge, sway, yaw]
        """
        tau = [self.tau[0][0], self.tau[1][0], self.tau[2][0]]
        self.tau_cmd_msg.data = tau
        self.tau_cmd_pub.publish(self.tau_cmd_msg)

    def publishAdaptiveGains(self):
        """
            Publish adaptive gains
        """
        Khat = [self.K_hat[0][0], self.K_hat[0][1], self.K_hat[0][2], self.K_hat[1][0], self.K_hat[1][1], self.K_hat[1][2], self.K_hat[2][0], self.K_hat[2][1], self.K_hat[2][2]]
        self.Khat_msg.data = Khat
        self.Khat_pub.publish(self.Khat_msg)

        bhat = [self.b_hat[0][0], self.b_hat[1][0], self.b_hat[2][0]]
        self.bhat_msg.data = bhat
        self.bhat_pub.publish(self.bhat_msg)


    def publishCBFActive(self):
        """
            Publish CBF active
        """
        print("self.active:", self.active)
        self.cbf_active_pub.publish(self.active)

    def find_des_vel(self):
        # self.eta[2][0] = pipi2inf(self.eta[2], self.psi_prev)
        # self.eta_d[2] = pipi2inf(self.eta_d[2], self.psi_d_prev)
        psi = self.eta[2][0]
        if self.active == 0:
            distance_error = np.sqrt((self.eta_d[0] - self.eta[0][0]) ** 2 + (self.eta_d[1] - self.eta[1][0]) ** 2)

            Kp = np.diag([0.15, 0.20, 0.25]) #TODO: RIKTIG KP FOR 1
            Kp = np.diag([0.15, 0.20, 0.25])
            Kp = np.diag([0.05, 0.2, 0.2]) #Funker greit på både 1 og 2
            Kp = np.diag([0.05, 0.002, 0.0]) #startverdier

            Kp = np.diag([0.1, 1, 0.1])*4 #Greie verdier for baseline controller



            #Kp = np.diag([0.00000001, 0.002, 0.05])



            # Kp = np.diag([0.03, 0.1, 0.1])
            # Kp = np.diag([0.03, 0.07, 0.15])

            pos_error = self.eta - self.eta_d
            print("self.eta:", self.eta)
            print("self.eta_d:", self.eta_d)
            print("pos_error:", pos_error)
            pos_error[2] = shortest_rotation(self.eta_d[2], self.eta[2])
            print("pos_error:", pos_error)
            nu_nom = -Kp * Rzyx(psi).T @ (pos_error) + Rzyx(psi).T @ self.eta_d_dt
            print("nu_nom:", nu_nom)
            self.nu_nom = nu_nom
            self.nu_cmd = nu_nom

        else:
            w_NE = Rzyx2D(psi) @ self.w_cmd
            desired_heading_NE = np.arctan2(w_NE[1][0], w_NE[0][0])
            desired_heading_NE = 0.9*self.old_w_psi_d+0.1*desired_heading_NE
            self.old_w_psi_d = desired_heading_NE
            psi_error = desired_heading_NE - psi
            K_psi = 0.25
            #K_psi = 0.5
            #K_psi = 0.33
            r_safe = K_psi * psi_error
            self.nu_cmd = np.array([[self.w_cmd[0][0]], [self.w_cmd[1][0]], [0]])
            self.nu_cmd = np.array([[self.w_cmd[0][0]], [self.w_cmd[1][0]], [r_safe]])
            #limited_nu = rate_limiter(self.nu_cmd, self.nu_cmd_old, 0.001)
            #self.nu_cmd_old = self.nu_cmd
            #self.nu_cmd = limited_nu
        #limited_nu = rate_limiter(self.nu_cmd, self.nu_cmd_old, 0.0005) #TODO Muligens fjern
        # limited_nu = rate_limiter(self.nu_cmd, self.nu_cmd_old, 0.006)
        #self.nu_cmd = limited_nu
        self.nu_cmd_old = self.nu_cmd

        # TODO: se an verdiene
        if self.nu_cmd[0][0] > 0.12:
            self.nu_cmd[0][0] = 0.12
        #elif self.nu_cmd[0][0] < 0:
        #    self.nu_cmd[0][0] = 0
        if self.nu_cmd[1][0] > 0.05:
            self.nu_cmd[1][0] = 0.05
        elif self.nu_cmd[1][0] < -0.05:
            self.nu_cmd[1][0] = -0.05
        #if self.nu_cmd[2][0] > 0.2:
        #    self.nu_cmd[2][0] = 0.2
        #elif self.nu_cmd[2][0] < -0.2:
        #    self.nu_cmd[2][0] = -0.2

        if self.active and self.nu_cmd[0][0] > 0.1:
            self.nu_cmd[0][0] = 0.1

        self.nu_cmd_dot = (self.nu_cmd - self.nu_cmd_old) / self.dt
        self.nu_cmd_old = self.nu_cmd
        self.nu_cmd_dot_old = self.nu_cmd_dot



    def baseline_velocity_tracking(self):
        self.e = self.nu - self.nu_cmd
        self.xi = self.xi + self.Ts * self.e

        tau = -self.Kp @ self.e - self.Ki @ self.xi + self.D0 @ self.nu_cmd + self.M0 @ self.nu_cmd_dot

        return tau

    def MRAC_velocity_tracking_NR(self):
        self.e = self.nu - self.nu_ref  # Note, self.e in the MRAC is not the same as self.e in baseline controller
        print("")
        print("self.nu    :", round(self.nu[0][0], 3), round(self.nu[1][0], 3), round(self.nu[2][0], 3) )
        print("self.nu_ref:", round(self.nu_ref[0][0], 3), round(self.nu_ref[1][0], 3), round(self.nu_ref[2][0], 3) )
        nu_ref_dot = self.A_ref @ (self.nu_ref - self.nu_cmd) + self.nu_cmd_dot + self.L_ep @ (self.nu - self.nu_ref)
        self.nu_ref = self.nu_ref + self.dt * nu_ref_dot

        # Control law
        tau_bl = -self.K_LQR @ self.e + self.D0 @ self.nu_cmd + self.M0 @ self.nu_cmd_dot 
        tau_ad = -self.K_hat @ tau_bl - self.b_hat

        tau = tau_bl + tau_ad

        # Update laws
        K_hat_transpose_dot = self.Gamma_K @ tau_bl @ self.e.T @ np.linalg.inv(self.P_ep) @ np.linalg.inv(self.M0)
        K_hat_transpose = self.K_hat.T + self.Ts * K_hat_transpose_dot
        self.K_hat = K_hat_transpose.T

        b_hat_dot = self.Gamma_b @ (np.linalg.inv(self.P_ep) @ np.linalg.inv(
            self.M0)).T @ self.e 
        self.b_hat = self.b_hat + self.Ts * b_hat_dot

        return tau
    
    def CBF_line2(self):
        p = np.array([[self.eta[0][0], self.eta[1][0]]]).T
        psi = self.eta[2][0]
        self.w = self.nu[0:2]
        # self.w = self.nu_cmd[0:2]
        w_d = self.nu_nom[0:2]  # TODO: Fjern
        w = self.w

        B = self.c - self.q.T @ p
        # print("B:", B, "eta_d:", self.eta_d[0], self.eta_d[1], "eta:", self.eta[0], self.eta[1])
        print("self.w:", self.w, self.w.shape)
        B_dot = -self.q.T @ Rzyx2D(psi) @ self.w


        # print("B:", B)
        # print("B_dot:", B_dot)
        gamma = 0.1
        gamma = 2
        #gamma = 4
        gamma = 0.2 #Fungerende gamma
        gamma = 0.25
        gamma = 0.2
        #gamma = 2
        alpha = gamma * B
        a = alpha
        b = -self.q.T @ Rzyx2D(psi)
        #P = np.array([[20.0, -1.5], [-1.5, 0.5]])
        P = np.array([[1.0, 0.0], [0.0, 1.0]])
        #P = np.array([[1000.0, 0.0], [0.0, 1.0]])



        boundary_normal = np.array([self.q[1], -self.q[0]])  # Compute the outward normal to the boundary
        boundary_normal = boundary_normal / np.linalg.norm(boundary_normal)  # Normalize the boundary normal

        # Compute the dot product between nu_cmd and the boundary normal
        direction_penalty = np.dot(self.nu_cmd[0:2].T, boundary_normal)

        # Modify P based on the direction penalty
        # P = np.array([[10.0 + direction_penalty[0][0], 0.0], [0.0, 100.0 + direction_penalty[0][0]]])


        if B_dot <= -alpha:

            #w_safe = w - (a + b @ w) / (b @ np.linalg.inv(P) @ b.T) * np.linalg.inv(P) @ b.T
            w_nom = self.nu_nom[0:2]
            w_safe = w_nom - (a+b@w_nom)/(b@np.linalg.inv(P)@b.T)*np.linalg.inv(P)@b.T
            w_safe = np.array([[w_safe[0][0], w_safe[1][0]]]).T


            #TODO: Stikker av boundarien tidigere med følgende grenser:
            #if w_safe[0] > 0.065:
            #    w_safe[0] = 0.065
            #elif w_safe[0] < 0:
            #    w_safe[0] = 0
            #if w_safe[1] > 0.05:
            #    w_safe[1] = 0.05
            #elif w_safe[1] < -0.05:
            #    w_safe[1] = -0.05


            self.w_cmd = w_safe
            limited_w = rate_limiter(self.w_cmd, self.w_old, 0.0005)
            #self.w_cmd = limited_w
            #self.w_cmd = 0.9*self.w_old + 0.1*w_safe
            self.w_old = self.w_cmd
            self.active = 1

        else:
            self.active = 0



if __name__ == '__main__':
    rospy.init_node("controller")
    rospy.loginfo(f"INITIALIZING {vessel_name} PID CONTROLLER NODE")
    r = rospy.Rate(100)
    dt = 0.01  # Timestep corresponding to sampling frequency of 100 Hz

    tracking_method = 0 # 0: baseline, 1: MRAC
    # initialize reference model
    controller = Controller(dt=dt)

    controller.q = np.array([[-2.92,1.5]]).T
    controller.c = -8.33
    controller.q = np.array([[1.0, 0]]).T
    controller.c = 2.75
    t0 = rospy.get_time()
    #controller.eta_d = np.array([[0], [0], [0]])
    #controller.eta_d_dt = np.array([[0], [0], [0]])


    while not rospy.is_shutdown():
        #if t0-rospy.get_time() > 40:
        #    controller.eta_d = np.array([[1.5], [1], [0]])
        #if t0-rospy.get_time() > 100:
        #    controller.eta_d = np.array([[3], [-1], [0]])
        
        #controller.nu_cmd = np.array([[0.05], [0], [0]])
        if controller.cbfstate == "CBF ON":
            controller.CBF_line2()
        #controller.CBF_line2()
        # calculate command forces
        controller.update(tracking_method)
        # publish command forces
        controller.publishTau()

        # publish adaptive gains
        controller.publishAdaptiveGains()
        controller.publishCBFActive()

        r.sleep()

    rospy.spin()
